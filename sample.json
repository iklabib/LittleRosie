{"src_test":[{"filename":"CalculatorTests.cs","path":"tests","src":"using Xunit;\n\npublic class CalculatorTests\n{\n    private readonly Calculator _calculator;\n    \n    public CalculatorTests()\n    {\n        _calculator = new Calculator();\n    }\n    \n    [Fact]\n    public void Add_ShouldReturnSum()\n    {\n        int a = 5;\n        int b = 3;\n        int result = _calculator.Add(a, b);\n        Assert.Equal(8, result);\n    }\n\n    [Theory]\n    [InlineData(2, true)]\n    [InlineData(3, false)]\n    [InlineData(4, true)]\n    public void IsEven_ShouldReturnCorrectResult(int number, bool expected)\n    {\n        bool result = _calculator.IsEven(number);\n        Assert.Equal(expected, result);\n    }\n\n    [Fact]\n    public void Divide_ShouldThrowException_WhenDividingByZero()\n    {\n        Assert.Throws<DivideByZeroException>(() => _calculator.Divide(10, 0));\n    }\n\n    [Fact(Skip = \"Example of skipped test\")]\n    public void SkippedTest_ShouldNotRun()\n    {\n        Assert.Fail(\"This test should be skipped\");\n    }\n\n    [Fact]\n    public void IntentionallyFailing_ForDemo()\n    {\n        Assert.Fail(\"This test is designed to fail for demonstration\");\n    }\n}\n"}],"src":[{"filename":"Calculator.cs","path":"src","src":"public class Calculator\n{\n    public int Add(int a, int b) => a + b;\n    public int Divide(int a, int b) => b != 0 ? a / b : throw new DivideByZeroException();\n    public bool IsEven(int number) => number % 2 == 0;\n}\n"}]}